import requests
import tensorflow as tf
from requests_toolbelt.multipart.encoder import MultipartEncoder
from core import path_input_style, path_input_content, path_output, path_content, get_args
from vgg import VGG

args = get_args()
args_token = args['token']
args_message_id = args['message']

def get_message(token, message_id):
    url = f'https://webexapis.com/v1/messages/{message_id}'
    headers = {
        'Authorization': f'Bearer {token}'
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        print("请求获取messages成功！")
        return response.json()
    else:
        print("请求失败！状态码：", response.status_code)
        print("响应内容：", response.text)
    
    return False

def get_image(token, url, fpath):
    headers = {
        'Authorization': f'Bearer {token}'
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        print("请求下载图片成功！")
        content_type = response.headers.get("content-type")
        if "image" in content_type:
            with open(fpath, "wb") as f:
                f.write(response.content)
            return True
    else:
        print("请求失败！状态码：", response.status_code)
        print("响应内容：", response.text)
    
    return False

def send_message(token, roomId, parentId):
    data = {
        "roomId": roomId,
        "parentId": parentId,
        "text": "Here is the style transfer image generated by AI.",
        'files': ('new.png', open(path_output, 'rb'), 'image/png')
    }

    url = "https://webexapis.com/v1/messages"
    m_data = MultipartEncoder(data)
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': m_data.content_type
    }

    response = requests.post(url, data=m_data, headers=headers)

    if response.status_code == 200:
        print("请求发送成功！")
    else:
        print("请求失败！状态码：", response.status_code)
        print("响应内容：", response.text)

from_message = get_message(args_token, args_message_id)
from_message_files = from_message['files']

if len(from_message_files)<=0:
    print('Not enough input images')
else:
    # prepare data
    real_content_path = path_input_content
    if len(from_message_files)>1:
        get_image(args_token, from_message_files[0], path_input_content)
        get_image(args_token, from_message_files[1], path_input_style)
    elif len(from_message_files)>0:
        real_content_path = path_content
        get_image(args_token, from_message_files[0], path_input_style)
        
    # generate
    with tf.device('/CPU:0'):
        vgg = VGG()
        vgg.run(real_content_path, path_input_style, path_output)
        print('Finish VGG!')
        
    # send messages
    send_message(args_token, from_message['roomId'] ,args_message_id)